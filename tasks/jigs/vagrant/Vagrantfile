# WSU Server Base Vagrant Configuration
#
# Matches the WSU Server environment production setup as closely as possible.
# This will auto edit some of the local provisioning file but not the production.
# All production states/grains/pillars are to be managed by hand.
#
# We recommend Vagrant 1.3.5 and Virtualbox 4.3.
#
# -*- mode: ruby -*-
# vi: set ft=ruby :

#######################
# Setup
######################
# There shouldn't be anything to edit below this point config wise
####################################################################


#require 'json'
# 	

################################################################ 
# Setup value defaults
################################################################ 

	#base dir
	################################################################ 
		#@vagrant_dir = File.expand_path(File.dirname(__FILE__))

	# the sub projects :: writes out the salt "config data" and 
	# sets up for vagrant.  The production is done by hand on purpose
	###############################################################
		@destroying=false
		ARGV.each do |arg|        
			if arg.include?'destroy'
				@destroying=true
			end
		end
		#load 'includes/vagrant_loadconfig.rb'


################################################################ 
# Start Vagrant
################################################################   
Vagrant.configure("2") do |config|
	load 'includes/vagrant_env.rb'

		#for dev
		owner="washingtonstateuniversity"
		branch="bootstrap"
		bootstrap_path="#{owner}/WSU-Web-Serverbase/#{branch}"

		{% for name,server in servers -%}
			{% set vagrant = server.vagrant -%}
			{% set apps = server.apps -%}
			config.vm.define "{{ vagrant.hostname }}" do |vmConfig|

			# Box choice
			################################################################
				{% if vagrant.hostname -%}
					config.vm.box     = "{{ vagrant.box }}"
					config.vm.box_url = "{{ vagrant.box_url }}"
				{% else -%}
					config.vm.box     = "centos-64-x64-puppetlabs"
					config.vm.box_url = "http://puppet-vagrant-boxes.puppetlabs.com/centos-65-x64-virtualbox-nocm.box"
				{% endif -%}


				if !@destroying 
					{% for appname,app in apps -%}
					if !File.exist?("app/{{ appname }}")
						puts "cloning repo that was missing"
						puts "git clone {{ app.repo }} app/{{ appname }}"
						puts `git clone --depth=1 {{ app.repo }} app/{{ appname }}`
					end
					{% endfor -%}
				end

				#load 'includes/automated_salt_setup.rb'

				# Virtualbox specific settings for the virtual machine.
				################################################################ 
					vmConfig.vm.provider :virtualbox do |v|
						v.gui = {{ vagrant.gui }}
						{% if vagrant.hostname -%}
							v.name = "{{ vagrant.hostname }}"
						{% endif -%}
							v.memory = {{ vagrant.memory }}
						{% if vagrant.vram>8 -%}
							v.customize ["modifyvm", :id, "--vram", {{ vagrant.vram }}]
						{% endif -%}
						{% if vagrant.cores>1 -%}
							v.customize ["modifyvm", :id, "--cpus", {{ vagrant.cores }} ]
						{% endif -%}
						{% if vagrant.host_64bit -%}
							#v.customize ["modifyvm", :id, "--ioapic", "on"]
						{% endif -%}
					end

				# Set networking options
				################################################################   
					{% if vagrant.hostname -%}
						vmConfig.vm.hostname = '{{ vagrant.hostname | replace("_", "-") }}'
					{% endif -%}
					vmConfig.vm.network :private_network, ip: "{{ vagrant.ip }}"

				# register hosts for all hosts for apps and the server
				################################################################
				# Local Machine Hosts
				# Capture the paths to all `hosts` files under the repository's provision directory.
				
					hosts = [{% for appname,app in apps -%}
							{% for host in app.vagrant.hosts -%}"{{ host }}"{% if  not loop.last -%},{% endif -%}
							{% endfor -%}
					{% endfor -%} ]


					if defined? VagrantPlugins::HostsUpdater
						vmConfig.hostsupdater.aliases = hosts
					end

					vmConfig.vm.provision :hosts do |provisioner|
						provisioner.add_host '127.0.0.1', hosts
					end

				# Provisioning: Salt 
				################################################################
					bootstrap_path="{{ vagrant.owner }}/WSU-Web-Serverbase/{{ vagrant.branch }}"
					$provision_script=""
					$provision_script<<"curl -L https://raw.githubusercontent.com/#{bootstrap_path}/server-bootstrap.sh | sudo sh -s -- "
					vmConfig.vm.synced_folder "tasks/jigs/salt/minions", "/srv/salt/base/minions"
					$provision_script<<" -m {{ vagrant.minion }}_{{ vagrant.hostname }} "

					vmConfig.vm.provision :shell, :inline => "cp /vagrant/config.json /srv/salt/base/config.json"

				# Set up the web apps
				################################################################  

						# Set file mounts
						################################################################           
						# Mount the local project's app/ directory as /var/app inside the virtual machine. This will
						# be mounted as the 'vagrant' user at first, then unmounted and mounted again as 'www-data'
						# during provisioning.
						{% for fname,fobj in vagrant.shared_folders -%}
							vmConfig.vm.synced_folder "{{ fobj.from }}", "{{ fobj.dest }}", :mount_options => [ "{{ fobj.user }}", "{{ fobj.dmode }}", "{{ fobj.fmode }}" ]
						{% endfor -%}

						{% for appname,app in apps -%}
							$provision_script<<" -a {{ appname }}:{{ app.repoid }} "
						{% endfor -%}

						$provision_script<<" -b {{ vagrant.owner }} -o {{ vagrant.branch }} \n"
					
					if !@destroying
						$running="echo \"about to run running: #{$provision_script} \" \n"
						vmConfig.vm.provision "shell", inline: "#{$running}#{$provision_script}"
					else
						puts "About to destroy the local server"
					end
			end
		{% endfor %}

end
