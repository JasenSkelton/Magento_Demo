# WSU Server Base Vagrant Configuration
#
# Matches the WSU Server environment production setup as closely as possible.
# This will auto edit some of the local provisioning file but not the production.
# All production states/grains/pillars are to be managed by hand.
#
# We recommend Vagrant 1.3.5 and Virtualbox 4.3.
#
# -*- mode: ruby -*-
# vi: set ft=ruby :

#######################
# Setup
######################
# There shouldn't be anything to edit below this point config wise
####################################################################


#require 'json'
# 	

################################################################ 
# Setup value defaults
################################################################ 

	#base dir
	################################################################ 
		#@vagrant_dir = File.expand_path(File.dirname(__FILE__))

	# the sub projects :: writes out the salt "config data" and 
	# sets up for vagrant.  The production is done by hand on purpose
	###############################################################
		@destroying=false
		ARGV.each do |arg|        
			if arg.include?'destroy'
				@destroying=true
			end
		end
		@ssh=false
		ARGV.each do |arg|        
			if arg.include?'ssh'
				@ssh=true
			end
		end
		@up=false
		ARGV.each do |arg|        
			if arg.include?'up'
				@up=true
			end
		end
		@halt=false
		ARGV.each do |arg|        
			if arg.include?'halt'
				@halt=true
			end
		end
		@resume=false
		ARGV.each do |arg|        
			if arg.include?'resume'
				@resume=true
			end
		end
		@suspend=false
		ARGV.each do |arg|        
			if arg.include?'suspend'
				@suspend=true
			end
		end



		#load 'includes/vagrant_loadconfig.rb'


################################################################ 
# Start Vagrant
################################################################   
Vagrant.configure("2") do |config|
	if !@destroying && !@ssh && !@halt && !@resume && !@suspend
		load '.vagrant/includes/vagrant_env.rb'
	end
	$rootDir=Dir.pwd
 	#config.ssh.pty = true 
		{% for name,server in servers -%}
			{% set vagrant = server.vagrant -%}
			{% set apps = server.apps -%}
			{% set hostname = vagrant.hostname | replace("-", "") | replace("_", "") -%}
			config.vm.define "{{ hostname }}" do |vmConfig|
				#vmConfig.ssh.port = 22
				#vmConfig.ssh.password = "vagrant"
				vmConfig.ssh.forward_agent = true
			# Box choice
			################################################################
				vmConfig.vm.box_download_insecure = true
				{% if vagrant.box -%}
					vmConfig.vm.box     = "{{ vagrant.box }}"
					{% if vagrant.box_url -%}
						vmConfig.vm.box_url = "{{ vagrant.box_url }}"
					{% endif -%}
				{% else -%}
					vmConfig.vm.box     = "centos-64-x64-puppetlabs"
					vmConfig.vm.box_url = "http://puppet-vagrant-boxes.puppetlabs.com/centos-65-x64-virtualbox-nocm.box"
				{% endif -%}


				if !@destroying && !@ssh && !@halt && !@resume && !@suspend
					{% for appname,app in apps -%}
					{% if vagrant.hostname -%}
						{% set install_dir = app.install_dir -%}
					{% else -%}
						{% set install_dir = appname -%}
					{% endif -%}
					if !File.exist?("server/app/{{ install_dir }}")
						puts "cloning repo that was missing"
						puts "git clone --depth=1 {% if app.branch %}-b {{ app.branch }} {% endif %} {{ app.repo }} server/app/{{ install_dir }}"
						puts `git clone --depth=1 {% if app.branch %}-b {{ app.branch }} {% endif %} {{ app.repo }} server/app/{{ install_dir }}`
					else
						puts "updating repo that was already present"
						Dir.chdir "server/app/{{ install_dir }}"
						puts "git fetchgit pull"
						puts "git reset --hard origin/{% if app.branch %}{{ app.branch }}{% else %}master{% endif %}"
						puts `git fetchgit pull`
						puts `git reset --hard origin/{% if app.branch %}{{ app.branch }}{% else %}master{% endif %}`
						Dir.chdir "/"
					end
					{% endfor -%}
				end

				#load 'includes/automated_salt_setup.rb'

				# Virtualbox specific settings for the virtual machine.
				################################################################ 
					vmConfig.vm.provider :virtualbox do |v|
						v.gui = {{ vagrant.gui }}
						{% if hostname -%}
							v.name = "{{ hostname }}"
						{% endif -%}
							v.memory = {{ vagrant.memory }}
						{% if vagrant.vram>8 -%}
							v.customize ["modifyvm", :id, "--vram", {{ vagrant.vram }}]
						{% endif -%}
						{% if vagrant.cores>1 -%}
							v.cpus = {{ vagrant.cores }}
						{% endif -%}
						{% if vagrant.ioapic|lower == "true" -%}
							v.customize ["modifyvm", :id, "--ioapic", "on"]
						{% else -%}
							v.customize ["modifyvm", :id, "--ioapic", "off"]
						{% endif -%}
						{% if vagrant.acpi|lower == "true" -%}
							v.customize ["modifyvm", :id, "--acpi", "on"]
						{% else -%}
							v.customize ["modifyvm", :id, "--acpi", "off"]
						{% endif -%}

						v.customize ["modifyvm", :id, "--biosbootmenu", "disabled"]
						v.customize ["modifyvm", :id, "--bioslogofadeout", "on"]
						v.customize ["modifyvm", :id, "--bioslogofadein", "on"]
						v.customize ["modifyvm", :id, "--bioslogodisplaytime", "5000"]
						v.customize ["modifyvm", :id, "--bioslogoimagepath",  "#{$rootDir}/.vagrant/includes/splash.bmp"]
						{% if vagrant.hwvirtex|lower == "true" -%}
							v.customize ["modifyvm", :id, "--hwvirtex", "on"]
						{% if vagrant.nestedpaging|lower == "true" -%}
							v.customize ["modifyvm", :id, "--nestedpaging", "on"]
						{% if vagrant.largepages|lower == "true" -%}
							v.customize ["modifyvm", :id, "--largepages", "on"]
						{% else -%}
							v.customize ["modifyvm", :id, "--largepages", "off"]
						{% endif -%}
						{% else -%}
							v.customize ["modifyvm", :id, "--nestedpaging", "off"]
						{% endif -%}
						{% else -%}
							v.customize ["modifyvm", :id, "--hwvirtex", "off"]
						{% endif -%}
				end

				# Set networking options
				################################################################   
					{% if hostname -%}
						vmConfig.vm.hostname = '{{ hostname }}'
					{% endif -%}
					vmConfig.vm.network :private_network, ip: "{{ vagrant.ip }}"

				{% if apps -%}
				# register hosts for all hosts for apps and the server
				################################################################
				# Local Machine Hosts
				# Capture the paths to all `hosts` from apps.
					
					hosts = [{% for appname,app in apps -%}
							{% for host in app.vagrant.hosts -%}"{{ host }}"{% if  not loop.last -%},{% endif -%}
							{% endfor -%}
					{% endfor -%} ]


					if defined? VagrantPlugins::HostsUpdater
						vmConfig.hostsupdater.aliases = hosts
					end

					vmConfig.vm.provision :hosts do |provisioner|
						provisioner.add_host '127.0.0.1', hosts
					end
				{% endif -%}

				# Provisioning: Salt based
				################################################################
						
					if @destroying
						puts "backing up the managed databases (note DB's created outside of the server builder will not be auto backed up)"
					end
						{% for appname,app in apps -%}
						{% if vagrant.hostname -%}
							{% set install_dir = app.install_dir -%}
						{% else -%}
							{% set install_dir = appname -%}
						{% endif -%}

								{
									[:destroy, :halt, :suspend ] => "sudo mkdir -p /var/app/db_bak/{{ install_dir }}/ && sudo mysqldump wsumage_networks > /var/app/db_bak/{{ install_dir }}/{{ install_dir }}-{{ appname }}.sql 2>/dev/null 2>&1 | exit 0"
								}.each do |command, trigger|
									config.trigger.before command, :stdout => true do
										confirm = nil
										until ["Y", "y", "N", "n"].include?(confirm)
											confirm = ask "Back up the database? (Y/N) "
										end
										if confirm.upcase == "Y"
											info "Dumping the database before #{command}ing the VM for app 'stores'"
											run "vagrant ssh -c '#{trigger}'"
										else
											info "skipped making the backup"
										end
									end
								end
							
								{
									[:up, :reload, :resume] => "echo \"would have loaded\""
								}.each do |command, trigger|
									config.trigger.after command, :stdout => true do
										if File.exist?("server/app/db_bak/{{ install_dir }}/current--{{ install_dir }}-{{ appname }}.sql")
											confirm = nil
											until ["Y", "y", "N", "n"].include?(confirm)
												confirm = ask "Would you like to reload the backup? (Y/N) "
											end
											if confirm.upcase == "Y"
												info "would be loading the "
												run  "vboxmanage #{trigger}"
											else
												info "skipped load the backup"
											end
										else
											puts "no backup dbs to load"
										end
									end
								end
						{% endfor -%}
						
				
						
					# we are marking the server that it's a vagrant control server for dev usage
					vmConfig.vm.provision :shell, :inline => "echo 'export SERVER_TYPE=\"VAGRANT\"' >> /etc/environment"
						# Set file mounts
						################################################################           
						# Mount the local project's server/app/ directory as /var/app inside the virtual machine. This will
						# be mounted as the 'vagrant' user at first, then unmounted and mounted again as 'www-data'
						# during provisioning.
						{% for fname,fobj in vagrant.shared_folders -%}
							vmConfig.vm.synced_folder "{{ fobj.from }}", "{{ fobj.dest }}", :mount_options => [ "{{ fobj.user }}", "{{ fobj.dmode }}", "{{ fobj.fmode }}" ]
						{% endfor -%}

						vmConfig.vm.provision "shell", inline: "sh /vagrant/server-bootstrap.sh"
						#vmConfig.vm.provision "shell", path: "server-bootstrap.sh"
					#if !@destroying
					#	$running="echo \"about to run running: #{$provision_script} \" \n"
					#	vmConfig.vm.provision "shell", inline: "#{$running}#{$provision_script}"
					#else
					#	puts "About to destroy the local server"
					#end
							
							
							

							
							
							
			end
		{% endfor %}

end
